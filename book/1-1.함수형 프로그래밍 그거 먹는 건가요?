# 함수형 자바스크립트 소개

함수형 프로그래밍이란 성공적인 프로그래밍을 위해 부수 효과를 최대한 멀리하고 조합성을 강조하는 프로그래밍 패러다임이다. 함수형 프로그래밍이 부수효과를 멀리하는 이유 첫째는 오류를 줄이기 위해서이고, 둘째는 조합성 혹은 모듈화 수준을 높이기 위해서이다.

## 1.1 함수형 프로그래밍 그거 먹는 건가요?

### 1.1.1 함수형 자바스크립트를 검색하면 나오는 예제

> "어떻게 돌아가는지는 알겠는데, 왜 이걸 쓰는 거지?"


##### [코드 1-1] addMaker
```javascript
function addMaker(a) {
  return function(b) {
    return a + b;
  }
}
addMaker(10)(5); // 15

/*
* addMaker(10)의 결과는 function(b) { return 10 + b; } 와 같고 함수다.
* (function(b) { return 10 + b; })(5) 와 같으므로 15가 된다.
* */
```

위와 같이 함수로 함수를 리턴하는 기법은 정말 많이 사용되고 있다.


### 1.1.2 값으로써의 함수와 클로저

##### [코드 1-4] addMaker
```javascript
function addMaker(a) {
  return function(b) {
    return a + b;
  }
}
addMaker(10)(5); // 15

var add5 = addMaker(5);
add5(3); // 8
add5(4); // 9

var add3 = addMaker(3);
add3(3); // 6
add3(4); // 7
```

함수는 값을 리턴할 수 있고, 함수는 값이 될수 있다. `addMaker`는 내부에서 함수를 정의했으며, 이 함수가 리턴한 익명함수는 클로저가 되었다. 리턴된 익명함수 내부에서 `a`가 정의된 적 없지만 `a`를 참조하고 있고, `a`는 부모스코프에 있다.

`addMaker`가 실행된 이후에, `addMaker`의 인자인 `a` 값을 변경시키지 않기에항상 동일한 값을 갖는다. 그래서 위 상황에서 `a`는 상수로 쓰이게 된다. 이런 상황의 `a`는 불변하지만, 모든 경우에서 그렇다고 할수 없다. 클로저가 기억하는 변수의 값은 변할 수 있는 것이다.

